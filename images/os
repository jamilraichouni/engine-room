FROM fedora:41
LABEL maintainer="Jamil Andr√© RAICHOUNI <raichouni@gmail.com>"
ARG USERMAP_UID
ARG USERMAP_GID
WORKDIR /tmp
RUN mkdir /build

# Enable installation of man-pages and re-install all installed pkgs {{{
RUN sed -i /^tsflags=/d /etc/dnf/dnf.conf
RUN rpm -qa > installed
RUN dnf -y reinstall --skip-unavailable $(cat installed)
RUN rm installed

# }}}

# system pkg manager installs {{{
RUN dnf --refresh -y install \
  cargo \
  fontconfig \
  ctags \
  # `fuse` is a dependency of `rclone` (see below)
  fuse \
  fzf \
  gcc \
  gcc-c++ \
  gdb \
  git \
  git-lfs \
  git-subtree \
  gnupg \
  golang \
  icoutils \
  # `inotify-tools` to have `inotifywait`
  inotify-tools \
  # `iputils` to have `ping`
  iputils \
  # `jq` to have command line JSON processor
  jq \
  # `kitty` to have `icat`
  kitty \
  kitty-terminfo \
  lshw \
  lsof \
  make \
  # man pages datbase
  man-db \
  man-pages \
  # `net-tools` to have `netstat`
  net-tools \
  openssh \
  openssh-server \
  openssl \
  passwd \
  # `patch` to apply patches to source code (e. g. from git diff)
  patch \
  # `pinentry` for `gnupg` to work with `pass`
  pinentry \
  pip \
  pkg-config \
  # `procps-ng` to have `ps`
  procps-ng \
  # `psmisc` to have `killall`
  psmisc \
  # `python3-devel` to have `Python.h` (needed by `line_profiler`)
  python3-devel \
  python3.12-devel \
  # `rclone` to mount cloud drives (e. g. GoogleDrive)
  rclone \
  rsync \
  # `strace` is a powerful diagnostic tool to trace system calls and signals
  # and check what an app is doing at system level, particularly with file operations.
  strace \
  sudo \
  tree \
  unrar \
  unzip \
  vim \
  wget \
  which \
  zip \
  zsh && \
  ln -s /usr/bin/gcc /usr/bin/aarch64-linux-gnu-gcc  # fixes build of python's line_profiler
# }}}

# use zsh for RUN commands {{{
SHELL ["/bin/zsh", "-c"]
ENV SHELL=/bin/zsh
RUN usermod --shell /bin/zsh root
# }}}

# locale and time zone  {{{
RUN dnf install  -y \
  glibc-locale-source \
  glibc-langpack-en && \
  localedef --force -i en_US -f UTF-8 en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en:C
ENV TZ=":/usr/share/zoneinfo/Europe/Berlin"
RUN echo "LANG=en_US.UTF-8" > /etc/locale.conf && \
  echo "LANGUAGE=en_US:en:C" >> /etc/locale.conf
# }}}

# Install nerd font {{{
ARG FONT_URL=https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/SourceCodePro.tar.xz
RUN FONT_FILE=$(basename ${FONT_URL} | rev | cut -d/ -f1 | rev) && \
  mkdir -p /usr/local/share/fonts && \
  curl -Lo /usr/local/share/fonts/${FONT_FILE} ${FONT_URL} && \
  tar -C /usr/local/share/fonts -xvf /usr/local/share/fonts/${FONT_FILE} && \
  rm /usr/local/share/fonts/${FONT_FILE} && \
  fc-cache -f -v
# }}}

# Docker {{{
RUN dnf --refresh -y install dnf-plugins-core && \
  dnf-3 config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo && \
  dnf --refresh -y install \
  containerd.io \
  dnf-plugins-core \
  docker-buildx-plugin \
  docker-ce \
  docker-ce-cli \
  docker-compose-plugin && \
  dnf remove -y dnf-plugins-core
# }}}

# set root passwd and get root via `su - root` {{{
RUN echo "root:" | chpasswd
# }}}

# Add user 'nerd' {{{
RUN sed -i 's/UID_MIN.*/UID_MIN 500/' /etc/login.defs && \
  sed -i 's/SYS_UID_MIN.*/SYS_UID_MIN 300/' /etc/login.defs && \
  sed -i 's/SYS_UID_MAX.*/SYS_UID_MAX 499/' /etc/login.defs && \
  groupmod -n user games && \
  useradd --badname -u $USERMAP_UID -g $USERMAP_GID -l -m -o -s /bin/zsh nerd && \
  # set password to "nerd"
  echo "nerd:nerd" | chpasswd && \
  usermod -aG user nerd && \
  usermod -aG docker nerd && \
  usermod --shell /bin/zsh root && \
  mkdir -p /home/nerd/.config && \
  chown $USERMAP_UID:$USERMAP_GID /home/nerd/.config

# disable hint that sudo is dangerous and allow sudo w/o passwd
RUN echo "Defaults lecture = never" >> /etc/sudoers.d/privacy && \
  echo "nerd ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers && \
  mkdir -p /mnt/volume && \
  chown $USERMAP_UID:$USERMAP_GID /mnt/volume

WORKDIR /home/nerd
# }}}

# setup ssh server {{{
RUN ssh-keygen -A && \
  sed -i 's/#PrintLastLog yes/PrintLastLog no/g' /etc/ssh/sshd_config && \
  sed -i 's/#Port 22/Port 1978/g' /etc/ssh/sshd_config && \
  sed -i 's/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/g' /etc/ssh/sshd_config
# }}}

# ohmyzsh and powerline10k {{{
USER nerd
RUN zsh -c "$(curl -fsSL \
  https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && \
  git clone --depth=1 \
  https://github.com/romkatv/powerlevel10k.git \
  /home/nerd/.oh-my-zsh/custom/themes/powerlevel10k && \
  wget https://github.com/romkatv/gitstatus/releases/download/v1.5.4/gitstatusd-linux-aarch64.tar.gz && \
  tar -xvzf gitstatusd-*.tar.gz && \
  rm gitstatusd-*.tar.gz && \
  mkdir -p /home/nerd/.cache/gitstatus && \
  mv gitstatusd-* /home/nerd/.cache/gitstatus && \
  wget https://github.com/romkatv/gitstatus/releases/download/v1.5.4/gitstatusd-linux-x86_64.tar.gz && \
  tar -xvzf gitstatusd-*.tar.gz && \
  rm gitstatusd-*.tar.gz && \
  mkdir -p /home/nerd/.cache/gitstatus && \
  mv gitstatusd-* /home/nerd/.cache/gitstatus && \
  rm /home/nerd/.zshrc && \
  touch /home/nerd/.zshrc
# }}}
