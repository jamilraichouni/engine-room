# Ruff: An extremely fast Python linter and code formatter.

Usage: ruff [OPTIONS] <COMMAND>

Commands:
  check    Run Ruff on the given files or directories (default)
  rule     Explain a rule (or all rules)
  config   List or describe the available configuration options
  linter   List all supported upstream linters
  clean    Clear any caches in the current directory and any subdirectories
  format   Run the Ruff formatter on the given files or directories
  server   Run the language server
  analyze  Run analysis over Python source code
  version  Display Ruff's version
  help     Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help
  -V, --version  Print version

Log levels:
  -v, --verbose  Enable verbose logging
  -q, --quiet    Print diagnostics, but nothing else
  -s, --silent   Disable all logging (but still exit with status code "1" upon detecting
                 diagnostics)

Global options:
      --config <CONFIG_OPTION>  Either a path to a TOML configuration file (`pyproject.toml` or
                                `ruff.toml`), or a TOML `<KEY> = <VALUE>` pair (such as you might
                                find in a `ruff.toml` configuration file) overriding a specific
                                configuration option. Overrides of individual settings using this
                                option always take precedence over all configuration files,
                                including configuration files that were also specified using
                                `--config`
      --isolated                Ignore all configuration files

For help with a specific command, see: `ruff help <command>`.



----------------
# Run Ruff on the given files or directories (default)

Usage: ruff check [OPTIONS] [FILES]...

Arguments:
  [FILES]...  List of files or directories to check [default: .]

Options:
      --fix
          Apply fixes to resolve lint violations. Use `--no-fix` to disable or `--unsafe-fixes` to
          include unsafe fixes
      --unsafe-fixes
          Include fixes that may not retain the original intent of the code. Use `--no-unsafe-fixes`
          to disable
      --show-fixes
          Show an enumeration of all fixed lint violations. Use `--no-show-fixes` to disable
      --diff
          Avoid writing any fixed files back; instead, output a diff for each changed file to
          stdout, and exit 0 if there are no diffs. Implies `--fix-only`
  -w, --watch
          Run in watch mode by re-running whenever files change
      --fix-only
          Apply fixes to resolve lint violations, but don't report on, or exit non-zero for,
          leftover violations. Implies `--fix`. Use `--no-fix-only` to disable or `--unsafe-fixes`
          to include unsafe fixes
      --ignore-noqa
          Ignore any `# noqa` comments
      --output-format <OUTPUT_FORMAT>
          Output serialization format for violations. The default serialization format is "full"
          [env: RUFF_OUTPUT_FORMAT=] [possible values: concise, full, json, json-lines, junit,
          grouped, github, gitlab, pylint, rdjson, azure, sarif]
  -o, --output-file <OUTPUT_FILE>
          Specify file to write the linter output to (default: stdout) [env: RUFF_OUTPUT_FILE=]
      --target-version <TARGET_VERSION>
          The minimum Python version that should be supported [possible values: py37, py38, py39,
          py310, py311, py312, py313]
      --preview
          Enable preview mode; checks will include unstable rules and fixes. Use `--no-preview` to
          disable
      --extension <EXTENSION>
          List of mappings from file extension to language (one of `python`, `ipynb`, `pyi`). For
          example, to treat `.ipy` files as IPython notebooks, use `--extension ipy:ipynb`
      --statistics
          Show counts for every rule with at least one violation
      --add-noqa
          Enable automatic additions of `noqa` directives to failing lines
      --show-files
          See the files Ruff will be run against with the current settings
      --show-settings
          See the settings Ruff will use to lint a given Python file
  -h, --help
          Print help

Rule selection:
      --select <RULE_CODE>
          Comma-separated list of rule codes to enable (or ALL, to enable all rules)
      --ignore <RULE_CODE>
          Comma-separated list of rule codes to disable
      --extend-select <RULE_CODE>
          Like --select, but adds additional rule codes on top of those already specified
      --per-file-ignores <PER_FILE_IGNORES>
          List of mappings from file pattern to code to exclude
      --extend-per-file-ignores <EXTEND_PER_FILE_IGNORES>
          Like `--per-file-ignores`, but adds additional ignores on top of those already specified
      --fixable <RULE_CODE>
          List of rule codes to treat as eligible for fix. Only applicable when fix itself is
          enabled (e.g., via `--fix`)
      --unfixable <RULE_CODE>
          List of rule codes to treat as ineligible for fix. Only applicable when fix itself is
          enabled (e.g., via `--fix`)
      --extend-fixable <RULE_CODE>
          Like --fixable, but adds additional rule codes on top of those already specified

File selection:
      --exclude <FILE_PATTERN>         List of paths, used to omit files and/or directories from
                                       analysis
      --extend-exclude <FILE_PATTERN>  Like --exclude, but adds additional files and directories on
                                       top of those already excluded
      --respect-gitignore              Respect file exclusions via `.gitignore` and other standard
                                       ignore files. Use `--no-respect-gitignore` to disable
      --force-exclude                  Enforce exclusions, even for paths passed to Ruff directly on
                                       the command-line. Use `--no-force-exclude` to disable

Miscellaneous:
  -n, --no-cache
          Disable cache reads [env: RUFF_NO_CACHE=]
      --cache-dir <CACHE_DIR>
          Path to the cache directory [env: RUFF_CACHE_DIR=]
      --stdin-filename <STDIN_FILENAME>
          The name of the file when passing it through stdin
  -e, --exit-zero
          Exit with status code "0", even upon detecting lint violations
      --exit-non-zero-on-fix
          Exit with a non-zero status code if any files were modified via fix, even if no lint
          violations remain

Log levels:
  -v, --verbose  Enable verbose logging
  -q, --quiet    Print diagnostics, but nothing else
  -s, --silent   Disable all logging (but still exit with status code "1" upon detecting
                 diagnostics)

Global options:
      --config <CONFIG_OPTION>  Either a path to a TOML configuration file (`pyproject.toml` or
                                `ruff.toml`), or a TOML `<KEY> = <VALUE>` pair (such as you might
                                find in a `ruff.toml` configuration file) overriding a specific
                                configuration option. Overrides of individual settings using this
                                option always take precedence over all configuration files,
                                including configuration files that were also specified using
                                `--config`
      --isolated                Ignore all configuration files



----------------
# Explain a rule (or all rules)

Usage: ruff rule [OPTIONS] <RULE|--all>

Arguments:
  [RULE]  Rule to explain

Options:
      --all                            Explain all rules
      --output-format <OUTPUT_FORMAT>  Output format [default: text] [possible values: text, json]
  -h, --help                           Print help

Log levels:
  -v, --verbose  Enable verbose logging
  -q, --quiet    Print diagnostics, but nothing else
  -s, --silent   Disable all logging (but still exit with status code "1" upon detecting
                 diagnostics)

Global options:
      --config <CONFIG_OPTION>  Either a path to a TOML configuration file (`pyproject.toml` or
                                `ruff.toml`), or a TOML `<KEY> = <VALUE>` pair (such as you might
                                find in a `ruff.toml` configuration file) overriding a specific
                                configuration option. Overrides of individual settings using this
                                option always take precedence over all configuration files,
                                including configuration files that were also specified using
                                `--config`
      --isolated                Ignore all configuration files



----------------
# List or describe the available configuration options

Usage: ruff config [OPTIONS] [OPTION]

Arguments:
  [OPTION]  Config key to show

Options:
      --output-format <OUTPUT_FORMAT>  Output format [default: text] [possible values: text, json]
  -h, --help                           Print help

Log levels:
  -v, --verbose  Enable verbose logging
  -q, --quiet    Print diagnostics, but nothing else
  -s, --silent   Disable all logging (but still exit with status code "1" upon detecting
                 diagnostics)

Global options:
      --config <CONFIG_OPTION>  Either a path to a TOML configuration file (`pyproject.toml` or
                                `ruff.toml`), or a TOML `<KEY> = <VALUE>` pair (such as you might
                                find in a `ruff.toml` configuration file) overriding a specific
                                configuration option. Overrides of individual settings using this
                                option always take precedence over all configuration files,
                                including configuration files that were also specified using
                                `--config`
      --isolated                Ignore all configuration files



----------------
# List all supported upstream linters

Usage: ruff linter [OPTIONS]

Options:
      --output-format <OUTPUT_FORMAT>  Output format [default: text] [possible values: text, json]
  -h, --help                           Print help

Log levels:
  -v, --verbose  Enable verbose logging
  -q, --quiet    Print diagnostics, but nothing else
  -s, --silent   Disable all logging (but still exit with status code "1" upon detecting
                 diagnostics)

Global options:
      --config <CONFIG_OPTION>  Either a path to a TOML configuration file (`pyproject.toml` or
                                `ruff.toml`), or a TOML `<KEY> = <VALUE>` pair (such as you might
                                find in a `ruff.toml` configuration file) overriding a specific
                                configuration option. Overrides of individual settings using this
                                option always take precedence over all configuration files,
                                including configuration files that were also specified using
                                `--config`
      --isolated                Ignore all configuration files



----------------
# Clear any caches in the current directory and any subdirectories

Usage: ruff clean [OPTIONS]

Options:
  -h, --help  Print help

Log levels:
  -v, --verbose  Enable verbose logging
  -q, --quiet    Print diagnostics, but nothing else
  -s, --silent   Disable all logging (but still exit with status code "1" upon detecting
                 diagnostics)

Global options:
      --config <CONFIG_OPTION>  Either a path to a TOML configuration file (`pyproject.toml` or
                                `ruff.toml`), or a TOML `<KEY> = <VALUE>` pair (such as you might
                                find in a `ruff.toml` configuration file) overriding a specific
                                configuration option. Overrides of individual settings using this
                                option always take precedence over all configuration files,
                                including configuration files that were also specified using
                                `--config`
      --isolated                Ignore all configuration files



----------------
# Run the Ruff formatter on the given files or directories

Usage: ruff format [OPTIONS] [FILES]...

Arguments:
  [FILES]...
          List of files or directories to format [default: .]

Options:
      --check
          Avoid writing any formatted files back; instead, exit with a non-zero status code if any
          files would have been modified, and zero otherwise

      --diff
          Avoid writing any formatted files back; instead, exit with a non-zero status code and the
          difference between the current file and how the formatted file would look like

      --extension <EXTENSION>
          List of mappings from file extension to language (one of `python`, `ipynb`, `pyi`). For
          example, to treat `.ipy` files as IPython notebooks, use `--extension ipy:ipynb`

      --target-version <TARGET_VERSION>
          The minimum Python version that should be supported
          
          [possible values: py37, py38, py39, py310, py311, py312, py313]

      --preview
          Enable preview mode; enables unstable formatting. Use `--no-preview` to disable

  -h, --help
          Print help (see a summary with '-h')

Miscellaneous:
  -n, --no-cache
          Disable cache reads
          
          [env: RUFF_NO_CACHE=]

      --cache-dir <CACHE_DIR>
          Path to the cache directory
          
          [env: RUFF_CACHE_DIR=]

      --stdin-filename <STDIN_FILENAME>
          The name of the file when passing it through stdin

File selection:
      --respect-gitignore
          Respect file exclusions via `.gitignore` and other standard ignore files. Use
          `--no-respect-gitignore` to disable

      --exclude <FILE_PATTERN>
          List of paths, used to omit files and/or directories from analysis

      --force-exclude
          Enforce exclusions, even for paths passed to Ruff directly on the command-line. Use
          `--no-force-exclude` to disable

Format configuration:
      --line-length <LINE_LENGTH>
          Set the line-length

Editor options:
      --range <RANGE>
          When specified, Ruff will try to only format the code in the given range.
          It might be necessary to extend the start backwards or the end forwards, to fully enclose
          a logical line.
          The `<RANGE>` uses the format `<start_line>:<start_column>-<end_line>:<end_column>`.
          
          - The line and column numbers are 1 based.
          - The column specifies the nth-unicode codepoint on that line.
          - The end offset is exclusive.
          - The column numbers are optional. You can write `--range=1-2` instead of
          `--range=1:1-2:1`.
          - The end position is optional. You can write `--range=2` to format the entire document
          starting from the second line.
          - The start position is optional. You can write `--range=-3` to format the first three
          lines of the document.
          
          The option can only be used when formatting a single file. Range formatting of notebooks
          is unsupported.

Log levels:
  -v, --verbose
          Enable verbose logging

  -q, --quiet
          Print diagnostics, but nothing else

  -s, --silent
          Disable all logging (but still exit with status code "1" upon detecting diagnostics)

Global options:
      --config <CONFIG_OPTION>
          Either a path to a TOML configuration file (`pyproject.toml` or `ruff.toml`), or a TOML
          `<KEY> = <VALUE>` pair (such as you might find in a `ruff.toml` configuration file)
          overriding a specific configuration option. Overrides of individual settings using this
          option always take precedence over all configuration files, including configuration files
          that were also specified using `--config`

      --isolated
          Ignore all configuration files



----------------
# Run the language server

Usage: ruff server [OPTIONS]

Options:
      --preview
          Enable preview mode. Use `--no-preview` to disable.
          
          This enables unstable server features and turns on the preview mode for the linter and the
          formatter.

  -h, --help
          Print help (see a summary with '-h')

Log levels:
  -v, --verbose
          Enable verbose logging

  -q, --quiet
          Print diagnostics, but nothing else

  -s, --silent
          Disable all logging (but still exit with status code "1" upon detecting diagnostics)

Global options:
      --config <CONFIG_OPTION>
          Either a path to a TOML configuration file (`pyproject.toml` or `ruff.toml`), or a TOML
          `<KEY> = <VALUE>` pair (such as you might find in a `ruff.toml` configuration file)
          overriding a specific configuration option. Overrides of individual settings using this
          option always take precedence over all configuration files, including configuration files
          that were also specified using `--config`

      --isolated
          Ignore all configuration files



----------------
# Run analysis over Python source code

Usage: ruff analyze [OPTIONS] <COMMAND>

Commands:
  graph  Generate a map of Python file dependencies or dependents
  help   Print this message or the help of the given subcommand(s)

Options:
  -h, --help  Print help

Log levels:
  -v, --verbose  Enable verbose logging
  -q, --quiet    Print diagnostics, but nothing else
  -s, --silent   Disable all logging (but still exit with status code "1" upon detecting
                 diagnostics)

Global options:
      --config <CONFIG_OPTION>  Either a path to a TOML configuration file (`pyproject.toml` or
                                `ruff.toml`), or a TOML `<KEY> = <VALUE>` pair (such as you might
                                find in a `ruff.toml` configuration file) overriding a specific
                                configuration option. Overrides of individual settings using this
                                option always take precedence over all configuration files,
                                including configuration files that were also specified using
                                `--config`
      --isolated                Ignore all configuration files
